@model Commu_balance.Models.Profile

@{
	ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<h4>Profile</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.User_IDNo, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.User_IDNo, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.User_IDNo, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Profile_Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Profile_Name, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Profile_Name, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Profile_Surname, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Profile_Surname, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Profile_Surname, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Profile_Cellnumber, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Profile_Cellnumber, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Profile_Cellnumber, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Profile_Address, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Profile_Address, new { htmlAttributes = new { @class = "form-control", id = "travelto" } })
				@Html.ValidationMessageFor(model => model.Profile_Address, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Create" class="btn btn-default" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")

	<!--ENSURE YOU CHANGE TO YOUR OWN API KEY HERE !!! -->
	<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyBJiH2ZhfOjGD9SCZSWwpo5BDoCiL3up3Y" type="text/javascript"></script>

	<!-- code for example 1 -->
	<script>

		var source, destination;
		var directionsDisplay;
		var directionsService = new google.maps.DirectionsService();
		var inputFrom = document.getElementById('travelfrom');
		var inputTo = document.getElementById('travelto');
		var distances = document.getElementById('distance');

		// initialise the location of the map on Chichester in England (ref lat and lng)
		//var map = new google.maps.Map(document.getElementById('dvMap'), {
		//    center: { lat: 50.834697, lng: -0.773792 },
		//    zoom: 13,
		//    mapTypeId: 'roadmap'
		//});

		var options = {
			componentRestrictions: { country: ['za'] }
		};




		google.maps.event.addDomListener(window, 'load', function () {

			var autocomplete1 = new google.maps.places.Autocomplete(inputFrom, options);
			var autocomplete2 = new google.maps.places.Autocomplete(inputTo, options);

		});

		function GetRoute() {



			source = document.getElementById("travelfrom").value;
			destination = document.getElementById("travelto").value;
			distances.value = "";

			var request = {
				origin: source,
				destination: destination,
				travelMode: google.maps.TravelMode.DRIVING
			};

			directionsService.route(request, function (response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					directionsDisplay.setDirections(response);
				}

			});

			//*********DISTANCE AND DURATION**********************//
			var service = new google.maps.DistanceMatrixService();
			service.getDistanceMatrix({
				origins: [source],

				destinations: [destination],
				travelMode: google.maps.TravelMode.DRIVING,
				unitSystem: google.maps.UnitSystem.METRIC,
				avoidHighways: false,
				avoidTolls: false
			}, function (response, status)
			{

					if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS")
						{
							var distance = response.rows[0].elements[0].distance.text;
							var duration = response.rows[0].elements[0].duration.value;

							duration = parseFloat(duration / 60).toFixed(2);

							distances.value = distance.toLowerCase().replace(" km", "");
							distances.value = distances.value.split(',').join('.');
							distances.value = parseFloat(distances.value);
							inputFrom.readOnly = true;
							inputTo.readOnly = true;
						}
					else
						{
							alert("Unable to find the distance via road.");
							inputFrom.readOnly = false;
							inputTo.readOnly = false;
							distance.value = "";
						}
			});
		}

		function Reset()
		{
			inputFrom.value = "";
			inputTo.value = "";
			distance.value = "";
			inputFrom.readOnly = false;
			inputTo.readOnly = false
		}
	</script>
}